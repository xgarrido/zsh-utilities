#+TITLE:  Zsh Utilities Work
#+AUTHOR: Xavier Garrido
#+DATE:   2013-02-08
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:zsh-utilities.org][Zsh Utilities]].

* Zsh Utilities - Work
This file contains some function/alias in relation with "work" topic.
** pkgtools aliases
=pkgtools= is used as wrapper for installation. It is a bash program which wraps
=cmake= or some =Makefile= and is intensively used with SuperNEMO software.
#+BEGIN_SRC sh
  alias pkg-notify='notify -t 2000 -i stock_dialog-info "pkgtools"'

  function pkgc ()
  {
      ./pkgtools.d/pkgtool configure $@ && pkg-notify "Configure done"
  }

  function pkgb ()
  {
      ./pkgtools.d/pkgtool build && pkg-notify "Build done"
  }

  function pkgt ()
  {
      ./pkgtools.d/pkgtool test && pkg-notify "Running test programs done"
  }

  function pkgr ()
  {
      ./pkgtools.d/pkgtool reset && pkg-notify "Reset done"
  }

  function pkgi ()
  {
      ./pkgtools.d/pkgtool install && pkg-notify "Install done"
  }
#+END_SRC

** ROOT aliases
#+BEGIN_SRC sh
  alias root='root -l'
#+END_SRC

** SN@ilWare aliases
*** Setup
#+BEGIN_SRC sh
  alias do_nemo_setup='aggregator setup cadfael'
  alias do_snailware_setup='do_nemo_setup && snailware setup all && mkdir -p /tmp/${USER}/snemo.d'
#+END_SRC

*** Working configuration
Legacy configuration load the =legacy= svn branch to work with a full software
installation. Bayeux components are ordered by dependency and since there is a
change wrt to =geomtools= vs. =materials= dependency as well as =genbb_help=
depending on =dpp= for programs, we have to set the full list of Bayeux
components.
#+BEGIN_SRC sh
  alias build_snailware_legacy='do_nemo_setup && snailware setup channel && \
  snailware git-branch --branch legacy datatools mygsl geomtools materials brio cuts genbb_help genvtx trackfit emfield && \
  snailware git-branch --branch legacy sngeometry sncore sngenvertex sngenbb sng4 snreconstruction snvisualization snanalysis && \
  snrebuild datatools mygsl geomtools materials brio cuts genbb_help genvtx trackfit emfield && \
  snrebuild sngeometry sncore sngenvertex sngenbb sng4 snreconstruction snvisualization snanalysis'
  alias build_snailware_master='do_nemo_setup && snailware setup channel && \
  snailware git-branch --branch master bayeux sngeometry sncore snreconstruction snvisualization && \
  snailware git-branch --branch xg_devel snanalysis && \
  snrebuild bayeux falaise'
#+END_SRC

*** =dpp_processing= shortcuts
#+BEGIN_SRC sh
  function do_snemo_chain ()
  {
      __pkgtools__at_function_enter do_snemo_chain
      if [ -z $1 ]; then
          pkgtools__msg_error "Missing module name !"
          __pkgtools__at_function_exit
          return 1
      fi
      if pkgtools__has_binary dpp_processing; then
          dpp_processing -m $1 -c $SNAILWARE_SIMULATION_DIR/configuration/current/module_manager.conf \
              -l mctoools_g4 -l mctools_bio \
              -l sngeometry -l sncore -l sncore_bio -l snanalysis -l snanalysis_bio -l snreconstruction \
              -M 100 -% 10
      else
          pkgtools__msg_error "SN@ilWare has not been set"
          __pkgtools__at_function_exit
          return 1
      fi
      __pkgtools__at_function_exit
      return 0
  }
#+END_SRC

** Lyon ccali aliases
#+BEGIN_SRC sh
  if [[ $HOSTNAME = ccage* ]]; then
      alias qjob_nemo_user='echo "Number of jobs run by NEMO users"; qstat -u \* -ext -s r| grep nemo | awk "{print \$5}" | sort | uniq -c'
      alias qjob_my_total='echo -ne "Total number of jobs: ";qstat | wc -l'
      alias qjob_my_run='echo -ne "Number of running jobs: ";qstat | awk "{if (\$5 == \"r\") print 1}" | wc -l'
      alias qjob_summary='qjob_my_total; qjob_my_run; qjob_nemo_user'
  fi
#+END_SRC

** Activate g++ warnings
#+BEGIN_SRC sh
  function activate_cxxflags ()
  {
      __pkgtools__at_function_enter activate_cxxflags
      export CXXFLAGS="-Waddress -Warray-bounds -Wc++11-compat -Wchar-subscripts      \
    -Wenum-compare -Wcomment -Wformat -Wmain -Wmaybe-uninitialized -Wmissing-braces \
    -Wnonnull -Wparentheses -Wreorder -Wreturn-type -Wsequence-point -Wsign-compare \
    -Wstrict-aliasing -Wstrict-overflow=1 -Wswitch -Wtrigraphs -Wuninitialized      \
    -Wunknown-pragmas -Wunused-function -Wunused-label -Wunused-value               \
    -Wunused-variable -Wvolatile-register-var -Wclobbered -Wempty-body              \
    -Wignored-qualifiers -Wmissing-field-initializers -Wsign-compare -Wtype-limits  \
    -Wuninitialized -Wunused-parameter -Wunused-but-set-parameter"
      __pkgtools__at_function_exit
      return 0
  }
#+END_SRC
** Generate talk skeleton
*** Main function
#+BEGIN_SRC sh
  function make_new_talk ()
  {
      __pkgtools__default_values
      __pkgtools__at_function_enter make_new_talk

      # Internal functions
      --mnt::usage () {
      }

      local append_list_of_options
      local append_list_of_arguments

      local title
      local author="Xavier Garrido"
      local latex_class="beamer"
      local latex_class_options="snemo,nologo"
      while [ -n "$1" ]; do
          local token=$1
          if [ "${token[0,1]}" = "-" ]; then
              local opt=${token}
              append_list_of_options+="${opt} "
              if [ "${opt}" = "-h" -o "${opt}" = "--help" ]; then
                  --mnt::usage
                  return 0
              elif [ "${opt}" = "-d" -o "${opt}" = "--debug" ]; then
                  pkgtools__msg_using_debug
              elif [ "${opt}" = "-D" -o "${opt}" = "--devel" ]; then
                  pkgtools__msg_using_devel
              elif [ "${opt}" = "-v" -o "${opt}" = "--verbose" ]; then
                  pkgtools__msg_using_verbose
              elif [ "${opt}" = "-W" -o "${opt}" = "--no-warning" ]; then
                  pkgtools__msg_not_using_warning
              elif [ "${opt}" = "-q" -o "${opt}" = "--quiet" ]; then
                  pkgtools__msg_using_quiet
                  export PKGTOOLS_MSG_QUIET=1
              elif [ "${opt}" = "-i" -o "${opt}" = "--interactive" ]; then
                  pkgtools__ui_interactive
              elif [ "${opt}" = "-b" -o "${opt}" = "--batch" ]; then
                  pkgtools__ui_batch
              elif [ "${opt}" = "--gui" ]; then
                  pkgtools__ui_using_gui
              elif [ "${opt}" = "--title" ]; then
                  shift 1; title="$1"
              elif [ "${opt}" = "--author" ]; then
                  shift 1; author="$1"
              elif [ "${opt}" = "--latex-class" ]; then
                  shift 1; latex_class="$1"
              elif [ "${opt}" = "--latex-class-options" ]; then
                  shift 1; latex_class_options="$1"
              fi
          else
              arg=${token}
              if [ "x${arg}" != "x" ]; then
                  append_list_of_arguments+="${arg} "
              fi
          fi
          shift 1
      done

      # Remove last space
      append_list_of_arguments=${append_list_of_arguments%?}
      append_list_of_options=${append_list_of_options%?}
      pkgtools__msg_devel "append_list_of_arguments=${append_list_of_arguments}"
      pkgtools__msg_devel "append_list_of_options=${append_list_of_options}"

      # Local functions
      local base=~/Workdir/Talk
      local dirname="$(echo ${append_list_of_arguments} | awk '{print $1}')"
      local directory=${base}/${dirname}

      --mnt::create_directories () {
          mkdir -p ${directory}/{pdf,plot}
      }

      --mnt::generate_org_skeleton () {
          local org_file=${directory}/talk.org
          echo "#+TITLE:  ${title}"                               > ${org_file}
          echo "#+AUTHOR: ${author}"                             >> ${org_file}
          echo "#+DATE:   $(date +%d/%m/%Y)"                     >> ${org_file}
          echo "#+OPTIONS: toc:nil ^:{}"                         >> ${org_file}
          echo "#+STARTUP: beamer"                               >> ${org_file}
          echo "#+LATEX_CLASS: ${latex_class}"                   >> ${org_file}
          echo "#+LATEX_CLASS_OPTIONS: [${latex_class_options}]" >> ${org_file}
      }

      --mnt::generate_makefile () {
          local make_file=${directory}/Makefile
          echo "# -*- mode: makefile; -*-"                                         > ${make_file}
          echo "EMACS=emacs"                                                      >> ${make_file}
          echo "BATCH=\$(EMACS) --batch --eval '(setq starter-kit-dir \"~/.emacs.d\")' \
                                        --load '~/.emacs.d/starter-kit-org.el'"   >> ${make_file}
          echo "files_org = \$(wildcard *.org)"                                   >> ${make_file}
          echo "files_pdf = \$(files_org:.org=.pdf)"                              >> ${make_file}
          echo                                                                    >> ${make_file}
          echo "all: \$(files_pdf)"                                               >> ${make_file}
          echo                                                                    >> ${make_file}
          echo "%.pdf: %.org"                                                     >> ${make_file}
          echo "\t@echo \"NOTICE: Exporting \$< to pdf...\";"                     >> ${make_file}
          echo "\t@\$(BATCH) --visit \"\$<\" --funcall org-beamer-export-to-pdf"  >> ${make_file}
          echo "\t@cp \$@ pdf/\${@:.pdf=_${dirname}.pdf}"                         >> ${make_file}
          echo                                                                    >> ${make_file}
          echo "clean:"                                                           >> ${make_file}
          echo "\t@rm -rf latex.d *.tex *.pdf *.fdb* *~ "                         >> ${make_file}
          echo "\t@rm -rf *.out *.fls *.toc *.aux *.snm *.nav *.log"              >> ${make_file}
      }

      --mnt::generate_gitignore () {
          local gitignore=${directory}/.gitignore
          echo "/talk*.pdf"         >> ${gitignore}
          echo "/talk*.tex"         >> ${gitignore}
          echo "/talk*.auxlock"     >> ${gitignore}
          echo "/talk*.vrb"         >> ${gitignore}
          echo "/talk*.fdb_latexmk" >> ${gitignore}
          echo "/talk*.fls"         >> ${gitignore}
          echo "/talk*.aux"         >> ${gitignore}
          echo "*~"            >> ${gitignore}
          echo "latex.d/"      >> ${gitignore}
        }

      --mnt::import_talk () {
          (
              if [ -d ${directory}/.git ]; then
                  pkgtools__msg_warning "Directory '${directory}' is already under git-svn !"
                  return 0
              fi
              svn mkdir https://svn.lal.in2p3.fr/users/garrido/Talk/${dirname} -m "create ${dirname} directory"
              svn import ${directory} https://svn.lal.in2p3.fr/users/garrido/Talk/${dirname} -m "import trunk directory"
              rm -rf ${base}/${dirname}
              mkdir -p ${base}/${dirname}
              cd ${base}/${dirname}
              git svn init --prefix=svn/ --trunk=. https://svn.lal.in2p3.fr/users/garrido/Talk/${dirname}
              git svn fetch
          )
      }

      if [ "${dirname}" = "" ]; then
          pkgtools__msg_error "You must give a repository name !"
          __pkgtools__at_function_exit
          return 1
      fi

      --mnt::create_directories
      --mnt::generate_org_skeleton
      --mnt::generate_makefile
      --mnt::generate_gitignore
      --mnt::import_talk

      # Finally goto the directory
      cd ${base}/${dirname}

      unset title author latex_class latex_class_options
      unset dirname directory base
      unset append_list_of_arguments append_list_of_options
      unfunction -- --mnt::usage
      unfunction -- --mnt::generate_org_skeleton
      unfunction -- --mnt::create_directories
      unfunction -- --mnt::import_talk
      __pkgtools__at_function_exit
      return 0
  }
#+END_SRC

*** Completion function
#+BEGIN_SRC sh
  # Connect completion system
  compdef _make_new_talk make_new_talk
  _make_new_talk () {
      _arguments -C                                                                      \
          '(-h --help)'{-h,--help}'[print help message]'                                 \
          '(-v --verbose)'{-v,--verbose}'[produce verbose logging]'                      \
          '(-d --debug)'{-d,--debug}'[produce debug logging]'                            \
          '(-D --devel)'{-D,--devel}'[produce devel logging]'                            \
          --title'[set talk title]'                                                      \
          --author'[set author name]'                                                    \
          --latex-class'[set LaTeX class name]:class:->class'                            \
          --latex-class-options'[set LaTeX class options]:class-options:->class-options' \
          '*: :->args' && ret=0
      case $state in
          (class)
              local classes; classes=('beamer')
              _describe -t 'classes' 'class' classes && ret=0
              ;;
          (class-options)
              local class_options; class_options=(
                  'snemo' 'cpp_teaching' 'ddpfo'
                  'nologo' 'notitlelogo' 'noheaderlogo'
              )
              _describe -t 'class-options' 'option' class_options && ret=0
              ;;
          (args)
              local dirname; dirname=($(date +%y%m%d)_)
              _describe -t 'dirname' 'dirname' dirname && ret=0
              ;;
      esac
  }
#+END_SRC

#+TITLE:  Zsh Utilities Modules
#+AUTHOR: Xavier Garrido
#+DATE:   2013-02-16
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:zsh-utilities.org][Zsh Utilities]].

* Zsh Utilities - Modules
This file adds some configuration to external resources. Each program
configuration is done item per item. The preamble is just here to ensure the
binary is present. Thus each item is embedded between a preamble and postamble
which is a basic =if= command.

** dotfiles
[[http://pypi.python.org/pypi/dotfiles/][dotfiles]] is a tool to make managing your dotfile symlinks in $HOME easy,
allowing you to keep all your dotfiles in a single directory.
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[dotfiles] )); then
#+END_SRC

*** Aliases
#+BEGIN_SRC sh
  alias dotfiles='dotfiles -R ~/Development/dotfiles'
#+END_SRC
*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC

** fasd
[[https://github.com/clvv/fasd][fasd]] is a command-line productivity booster, offers quick access to files and directories,
inspired by autojump, z and v. Most of the following code is stolen from [[https://github.com/sorin-ionescu/prezto/tree/master/modules/fasd][prezto]].

*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[fasd] )); then
#+END_SRC

*** Initialization
#+BEGIN_SRC sh
  cache_file="${HOME}/.config/zsh/tmp/fasd_cache.zsh"
  if [[ "${commands[fasd]}" -nt "$cache_file" || ! -s "$cache_file" ]]; then
    # Set the base init arguments.
    init_args=(zsh-hook)

    # Set fasd completion init arguments, if applicable.
#    if zstyle -t ':prezto:module:completion' loaded; then
      init_args+=(zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)
#    fi

    # Cache init code.
    fasd --init "$init_args[@]" >! "$cache_file" 2> /dev/null
  fi
  source "$cache_file"
  unset cache_file init_args
#+END_SRC

*** Additional function for fast =cd=
#+BEGIN_SRC sh
  function fasd_cd {
    local fasd_ret="$(fasd -d "$@")"
    if [[ -d "$fasd_ret" ]]; then
      cd "$fasd_ret"
    else
      print "$fasd_ret"
    fi
  }
#+END_SRC

*** Aliases
**** Change the current working directory interactively
#+BEGIN_SRC sh
  alias j='fasd_cd -i'
#+END_SRC

*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC
** rsync
[[http://rsync.samba.org/][rsync]] is an open source utility that provides fast incremental file transfer
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[rsync] )); then
#+END_SRC

*** Aliases
#+BEGIN_SRC sh
  alias rsync='noglob rsync'
  _rsync_cmd='rsync --verbose --progress --human-readable --compress --archive --hard-links --one-file-system'

  alias rsync-copy="${_rsync_cmd}"
  alias rsync-move="${_rsync_cmd} --remove-source-files"
  alias rsync-update="${_rsync_cmd} --update"
  alias rsync-synchronize="${_rsync_cmd} --update --delete"

  unset _rsync_cmd
#+END_SRC
*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC

** Fabric
[[http://docs.fabfile.org/en/1.5/][Fabric]] is a Python (2.5 or higher) library and command-line tool for
streamlining the use of SSH for application deployment or systems administration
tasks.

It provides a basic suite of operations for executing local or remote shell
commands (normally or via sudo) and uploading/downloading files, as well as
auxiliary functionality such as prompting the running user for input, or
aborting execution.

*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[fab] )); then
#+END_SRC

*** Fabric manager
#+BEGIN_SRC sh
  function fab_manager ()
  {
      __pkgtools__default_values
      __pkgtools__at_function_enter fab_manager

      local append_list_of_options_arg
      local append_list_of_cmd_arg
      while [ -n "$1" ]; do
          local token="$1"
          if [ "${token[0,1]}" = "-" ]; then
              local opt=${token}
              if [ "${opt}" = "-h" -o "${opt}" = "--help" ]; then
                  return 0
              elif [ "${opt}" = "-d" -o "${opt}" = "--debug" ]; then
                  pkgtools__msg_using_debug
              elif [ "${opt}" = "-D" -o "${opt}" = "--devel" ]; then
                  pkgtools__msg_using_devel
              elif [ "${opt}" = "-v" -o "${opt}" = "--verbose" ]; then
                  pkgtools__msg_using_verbose
              elif [ "${opt}" = "-W" -o "${opt}" = "--no-warning" ]; then
                  pkgtools__msg_not_using_warning
              elif [ "${opt}" = "-q" -o "${opt}" = "--quiet" ]; then
                  pkgtools__msg_using_quiet
                  export PKGTOOLS_MSG_QUIET=1
              elif [ "${opt}" = "-i" -o "${opt}" = "--interactive" ]; then
                  pkgtools__ui_interactive
              elif [ "${opt}" = "-b" -o "${opt}" = "--batch" ]; then
                  pkgtools__ui_batch
              elif [ "${opt}" = "--gui" ]; then
                  pkgtools__ui_using_gui
              elif [ "${opt}" = "--password" ]; then
                  append_list_of_options_arg+="${opt} "
              else
                  append_list_of_cmd_arg+="${opt} "
              fi
          else
              if [ "x${token}" != "x" ]; then
                  append_list_of_cmd_arg+="${token} "
              fi
          fi
          shift
      done

      pkgtools__msg_notice "append_list_of_cmd_arg=${append_list_of_cmd_arg}"
      pkgtools__msg_notice "append_list_of_options_arg=${append_list_of_options_arg}"

      # Use this local function to do the evaluation on execution and not on 'compilation'
      __fab () {
          eval ffab "$@"
      }

      pkgtools__msg_notice "Running ${append_list_of_cmd_arg} mode"
      case $HOSTNAME in
          garrido-laptop)
              user=garrido
              hosts="garrido@lx3.la.in2p3.fr"
              ;;
          lx3.lal.in2p3.fr|nemo*.lal.in2p3.fr)
              user=nemo
              hosts="pc-nemo5,pc-nemo6,pc-nemo8,garrido@pc-nemo9"
              ;;
      esac
      __fab --user=${user} --hosts=${hosts} ${append_list_of_cmd_arg} ${append_list_of_options_arg}

      __pkgtools__at_function_exit
      return 0
  }

  _fab_manager () {
      compadd \
          $(fab --fabfile=/tmp/fabfile.py --list 2>/dev/null | grep -v commands)
  }
  compdef _fab_manager fab_manager
#+END_SRC

*** Aliases
#+BEGIN_SRC sh
  alias ffab='fab --fabfile=/tmp/fabfile.py --skip-bad-hosts --warn-only'
  alias fup_antigen='fab_manager update_antigen'
#+END_SRC

*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC

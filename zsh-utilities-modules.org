#+TITLE:  Zsh Utilities Modules
#+AUTHOR: Xavier Garrido
#+DATE:   2013-02-16
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:zsh-utilities.org][Zsh Utilities]].

* Zsh Utilities - Modules
This file adds some configuration to external resources. Each program
configuration is done item per item. The preamble is just here to ensure the
binary is present. Thus each item is embedded between a preamble and postamble
block code which is a basic =if= command.

** dotfiles
[[http://pypi.python.org/pypi/dotfiles/][dotfiles]] is a tool to make managing your dotfile symlinks in $HOME easy,
allowing you to keep all your dotfiles in a single directory.
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[dotfiles] )); then
#+END_SRC

*** Aliases
#+BEGIN_SRC sh :tangle no
  alias dotfiles='dotfiles -R ~/Development/github.com/xgarrido/dotfiles'
#+END_SRC
*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC

** fasd
[[https://github.com/clvv/fasd][fasd]] is a command-line productivity booster, offers quick access to files and directories,
inspired by autojump, z and v. Most of the following code is stolen from [[https://github.com/sorin-ionescu/prezto/tree/master/modules/fasd][prezto]].

*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[fasd] )); then
#+END_SRC

*** Initialization
#+BEGIN_SRC sh
  mkdir -p ${HOME}/.config/zsh/tmp
  cache_file="${HOME}/.config/zsh/tmp/fasd_cache.zsh"
  if [[ "${commands[fasd]}" -nt "$cache_file" || ! -s "$cache_file" ]]; then
      # Set the base init arguments.
      init_args=(zsh-hook)

      # Set fasd completion init arguments, if applicable.
      #    if zstyle -t ':prezto:module:completion' loaded; then
      init_args+=(zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)
      #    fi

      # Cache init code.
      fasd --init "$init_args[@]" >! "$cache_file" 2> /dev/null
  fi
  source "$cache_file"
  unset cache_file init_args
#+END_SRC

*** Additional function for fast =cd=
#+BEGIN_SRC sh
  function fasd_cd {
    local fasd_ret="$(fasd -d "$@")"
    if [[ -d "$fasd_ret" ]]; then
      cd "$fasd_ret"
    else
      print "$fasd_ret"
    fi
  }
#+END_SRC

*** Aliases
**** Change the current working directory interactively
#+BEGIN_SRC sh
  alias j='fasd_cd -i'
#+END_SRC

*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC
** rsync
[[http://rsync.samba.org/][rsync]] is an open source utility that provides fast incremental file transfer
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[rsync] )); then
#+END_SRC

*** Aliases
#+BEGIN_SRC sh
  function --rsync ()
  {
      if (( $+commands[colout] )); then
          $(pkgtools__get_binary_path rsync) $@ 2>&1 | colout -t rsync -T ${zsh_utilities_dir}
      else
          $(pkgtools__get_binary_path rsync) $@
      fi
  }

  alias rsync='noglob --rsync'
  local _rsync_cmd='--rsync --verbose --progress --human-readable --compress --archive --hard-links --one-file-system'

  alias rsync-copy="${_rsync_cmd}"
  alias rsync-move="${_rsync_cmd} --remove-source-files"
  alias rsync-update="${_rsync_cmd} --update"
  alias rsync-synchronize="${_rsync_cmd} --update --delete"
#+END_SRC

*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC
** colout
[[https://github.com/nojhan/colout][colout]] read lines of text stream on the standard input and output characters
matching a given regular expression /pattern/ in given and /style/: /style/ may
be colored bold strings, for instance.
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[colout] )); then
#+END_SRC
*** Homemade themes
**** =g++= theme
#+BEGIN_SRC python :tangle colout_myg++.py
  #encoding: utf-8

  def theme(context):
    import locale
    section="blue"
    # if the locale is unicode
    enc = locale.getpreferredencoding()
    if "UTF" in enc:
      # gcc will use unicode quotes
        qo = "[‘`]"
        qc = "[’']"
    else:
      # rather than ascii ones
        qo = "['`]"
        qc = "'"

    return context, [
        [ ("error: |erreur: "), "red", "bold" ],
        [ ("warning: |attention: "), "magenta", "bold" ],
        [ ("undefined reference to "), "red", "bold" ],
        # [-Wflag]
        [ "\[-W.*\]", "magenta"],

        # Highlight message start:
        #   path   file   ext     : line   :  col     …
        [ "(/.*?)/([^/:]+): (In .*)",
          section,
          "normal,normal,bold" ],

        [ "(/.*?)/([^/:]+): (At .*)",
          section,
          "normal,normal,bold" ],

        [ ("In file included from"), section ],

        # Highlight locations:
        #   path   file   ext     : line   :  col     …
        [ "(/.*?)/([^/:]+):([0-9]+):*([0-9]*)(.*)",
          "none,magenta,yellow,yellow,none",
          "normal,normal,normal,normal" ],

        # source code in single quotes
        [ qo+"(.*?)"+qc, "green", "bold" ],

        # # source code after a "note: candidate are/is:"
        [ ("note: ")+"((?!.*(candidate|"+qo+"|"+qc+")).*)$", "none", "bold" ],
        # after the code part, to avoid matching ANSI escape chars
        [ ("note: "), "green", "normal" ]
      ]
#+END_SRC

**** =ninja= theme
#+BEGIN_SRC python :tangle colout_myninja.py
  def theme(context):
      # Ninja theme:
      #  actions building
      building="blue"
      #  actions linking
      linking="green"
      #  actions generating
      generating="blue"

      return context, [
          # Linking
          [ "\[.*\]\s(Linking .* )(library|executable) (.*/)*(.+(\.[aso]+)*)$",
            linking, "normal,normal,normal,bold" ],
          # Building
          [ "^\[.*\]\s(Building \w* object)(\s+.*/)([-\w]+.c.*)(.o)$",
            building, "normal,normal,bold,normal"],
          # [percent] Generating
          [ "^\[.*\]\s(Generating)(\s+.*)$",
            generating, "normal,bold"],
          # Ninja stop
          [ ".*build stopped.*", "red", "bold" ],
          # progress percentage
          [ "^(\[.*\])", "yellow" ]
      ]
#+END_SRC

**** Logging theme
Theme used to color output from SN@ilWare software. Syntax used is defined in
this file https://nemo.lpc-caen.in2p3.fr/browser/datatools/trunk/include/datatools/logger.h
#+BEGIN_SRC python :tangle colout_mylogging.py
  #encoding: utf-8

  def theme(context):
      error="red"
      warning="magenta"
      notice="blue"
      information="cyan"
      debug="green"
      trace="yellow"
      return context, [
          [ "(^\[fatal]:|^\[fatal.*\])(.*$)", error, "bold,normal" ],
          [ "(^\[error]:|^\[error.*\])(.*$)", error, "bold,normal" ],
          [ "(^\[warning]:|^\[warning.*\])(.*$)", warning, "bold,normal" ],
          [ "(^\[notice]:|^\[notice.*\])(.*$)", notice, "bold,normal" ],
          [ "(^\[information]:|^\[information.*\])(.*$)", information, "bold,normal" ],
          [ "(^\[debug]:|^\[debug.*\])(.*$)", debug, "bold,normal" ],
          [ "(^\[trace]:|^\[trace.*\])(.*$)", trace, "bold,normal" ],
    ]
#+END_SRC

**** =org-mode= theme

#+BEGIN_SRC python :tangle colout_orgmode.py
  #encoding: utf-8

  def theme(context):
      return context, [
          [ "(=[^\"].*?=[^\"])", "cyan" ],
          [ "^\*{1}\s.*$", "red", "bold" ],
          [ "^\*{2}\s.*$", "green", "bold" ],
          [ "^\*{3}\s.*$", "blue", "bold" ],
          [ "^\*{4}\s.*$", "yellow", "bold" ],
          [ "^\*{5}\s.*$", "cyan", "bold" ],
          [ ("((?i)^#\+)(title|date|author|email):(.*)"), "blue", "bold,bold,normal" ],
          [ "#\+.*$", "250" ],
          [ "^:.*:.*$", "250" ],
          [ "\[\w\]", "magenta" ],
          [ "\[\[.*\]\]", "yellow" ],
          [ "^[\||+-].*", "blue" ],
    ]
#+END_SRC

**** =rsync= theme
#+BEGIN_SRC python :tangle colout_rsync.py
  #encoding: utf-8

  def theme(context):
        return context, [
              ["^sending.*", "red", "bold"],
              ["(^sent.*bytes.*)(received.*bytes) (.*/sec)",
               "blue,magenta,yellow", "bold,bold,normal"],
              ["(^total.*) (speedup.*)",
               "green,cyan", "bold,normal"],
              [ "^[a-zA-Z].*", "yellow", "normal"],
              [ "(^.*) (.*%)(.*/s)(.*:.*:.*).*(\(xfr#.*\))",
                "blue,green,magenta,green",
                "bold,conceal,normal,normal,conceal"],
        ]
#+END_SRC

*** Wrapping some functions arround =colout=
**** =cmake=
#+BEGIN_SRC sh
  if (( $+commands[cmake] )); then
      function cmake ()
      {
          $(pkgtools__get_binary_path cmake) $@ | colout -t cmake
      }
  fi
#+END_SRC
**** =ninja=
#+BEGIN_SRC sh
  if (( $+commands[ninja] )); then
      function ninja ()
      {
          $(pkgtools__get_binary_path ninja) $@ | colout -t cmake | colout -t myg++ -T ${zsh_utilities_dir} | colout -t myninja -T ${zsh_utilities_dir}
      }
  fi
#+END_SRC
*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC
** mr
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[mr] )); then
#+END_SRC
*** Function
#+BEGIN_SRC sh
  function mr ()
  {
      last=~/${@[-1]}
      if [ -d $last ]; then
          (
              cd $last
              $(pkgtools__get_binary_path $0) ${@:1:-1}
          )
      else
          $(pkgtools__get_binary_path $0) $@
      fi
  }
#+END_SRC
*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC
** plan
[[https://github.com/fengsp/plan][plan]] is a python package for writing and deploying cron jobs. =plan= will convert
python code to cron syntax.
*** Cron syntax
#+BEGIN_SRC python :results output :tangle no
  from plan import Plan

  cron = Plan()

  # cron.command('DISPLAY=:0 /home/garrido/.config/openbox/scripts/change-wallpaper', every='1.hour')
  cron.command('DISPLAY=:0 /home/garrido/Development/org-caldav/sync_calendar.sh', every='1.day', at='12:00')
  cron.command('cp /home/garrido/.emacs.d/tmp/session/emacs.desktop /home/garrido/.emacs.d/tmp/session/emacs-`date +\%Y-\%m-\%d`.desktop', every='monthly')
  cron.command('DISPLAY=:0 /home/garrido/.bin/mybackup --profile lal', every='1.day', at='13:00')
  cron.command('DISPLAY=:0 /home/garrido/.bin/mybackup --profile usb', every='1.day', at='13:00')
  cron.command('DISPLAY=:0 /home/garrido/.config/openbox/scripts/change-wallpaper fade', every='hourly')
  if __name__ == '__main__':
      cron.run('update')
#+END_SRC

#+RESULTS:
: [write] crontab file updated

** fzf
fzf is a general-purpose command-line fuzzy finder. See
[[https://github.com/junegunn/fzf]]

*** Source file
#+BEGIN_SRC sh
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+END_SRC
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[fzf] )); then
#+END_SRC
*** Use =ag=
#+BEGIN_SRC sh
  if (( $+commands[ag] )); then
      export FZF_DEFAULT_COMMAND='ag -g ""'
  fi
#+END_SRC
*** Color scheme
#+BEGIN_SRC sh
  export FZF_DEFAULT_OPTS='--color=16,info:4,pointer:3,bg+:15'
#+END_SRC
*** =z= - changing directory with fasd
#+BEGIN_SRC sh
  z() {
      [ $# -gt 0 ] && fasd_cd -d "$*" && return
      local dir
      dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
  }
#+END_SRC
*** =fo= - open file
#+BEGIN_SRC sh
  fo() {
      (
          cd ~
          local out file key
          IFS=$'\n' out=$(fzf --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
          key=$(head -1 <<< "$out")
          file=$(head -2 <<< "$out" | tail -1)
          if [ -n "$file" ]; then
              [ "$key" = ctrl-e ] && ec "$file" || xdg-open "$file" &
          fi
      )
  }
#+END_SRC
*** =fd= - go to the directory where the file is
#+BEGIN_SRC sh
  fd() {
      pkgtools__enter_directory $HOME
      local file
      local dir
      file=$(fzf +m -q "$1") && dir=$(dirname "$file")
      if [ -d "$dir" ]; then
        cd "$dir"
      else
        pkgtools__exit_directory
        return 1
      fi
      return 0
  }
#+END_SRC

*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC


# Local Variables:
# firestarter-mode: t
# firestarter: (org-babel-tangle)
# End:
** docker
*** Preamble
#+BEGIN_SRC sh
  if (( $+commands[docker] )); then
#+END_SRC

*** Clean docker
From https://lebkowski.name/docker-volumes/
#+BEGIN_SRC sh
  function clean_docker ()
  {
      # remove exited containers:
      docker ps --filter status=dead --filter status=exited -aq | xargs -r docker rm -v

      # remove unused images:
      docker images --no-trunc | grep '<none>' | awk '{ print $3 }' | xargs -r docker rmi --force

      # remove unused volumes:
      sudo find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d | grep -vFf <(
              docker ps -aq | xargs docker inspect | jq -r '.[] | .Mounts | .[] | .Name | select(.)'
          ) | xargs -r rm -fr
  }
#+END_SRC

*** Postamble
#+BEGIN_SRC sh
  fi
#+END_SRC
